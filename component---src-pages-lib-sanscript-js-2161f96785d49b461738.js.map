{"version":3,"sources":["webpack:///./src/pages/lib/sanscript.js","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["Sanscript","defaults","skip_sgml","syncope","enableTamilPronounciation","enableTamilCharPositionFixes","enableSanskritVedicAccents","schemes","bengali","vowels","split","vowel_marks","other_marks","virama","consonants","symbols","other","accent","combo_accent","devanagari","zwj","skip","candra","gujarati","gurmukhi","kannada","malayalam","oriya","tamil","telugu","iast","itrans","hk","slp1","velthuis","wx","romanSchemes","allAlternates","A","I","U","RRi","RRI","LLi","LLI","M","~N","ch","Ch","~n","v","Sh","kSh","j~n","OM","\\_","\\_H","\\'M","\\_M",".a","|","||","z","cache","isRomanScheme","name","hasOwnProperty","addBrahmicScheme","scheme","addRomanScheme","slice","cheapCopy","copy","key","kolkata","schemeNames","i","itrans_dravidian","t","data","from","to","options","map","cachedOptions","hasPriorState","value","alternates","fromScheme","letters","tokenLengths","marks","toScheme","group","fromGroup","toGroup","undefined","length","F","T","alts","numAlts","j","push","fromRoman","maxTokenLength","Math","max","apply","toRoman","makeMap","replace","alldata","tempLetter","tempMark","L","buf","dataLength","hadConsonant","optSkipSGML","optSyncope","tokenBuffer","skippingSGML","skippingTrans","toggledTrans","charAt","difference","token","substr","join","transliterateRoman","temp","danglingHash","hadRomanConsonant","transliterateBrahmic","module","exports","dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e"],"mappings":"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","file":"component---src-pages-lib-sanscript-js-2161f96785d49b461738.js","sourcesContent":["/**\n * Created by vikram on 9/11/2015.\n */\n \n    var Sanscript= function(){};\n\n    Sanscript.defaults = {\n        skip_sgml: false,\n        syncope: false,\n        enableTamilPronounciation: true,\n        enableTamilCharPositionFixes: true,\n        enableSanskritVedicAccents : true,\n    };\n\n    /* Schemes\n     * =======\n     * Schemes are of two kinds: \"Brahmic\" and \"roman.\" \"Brahmic\" schemes\n     * describe abugida scripts found in India. \"Roman\" schemes describe\n     * manufactured alphabets that are meant to describe or encode Brahmi\n     * scripts. Abugidas and alphabets are processed by separate algorithms\n     * because of the unique difficulties involved with each.\n     *\n     * Brahmic consonants are stated without a virama. Roman consonants are\n     * stated without the vowel 'a'.\n     *\n     * (Since \"abugida\" is not a well-known term, Sanscript uses \"Brahmic\"\n     * and \"roman\" for clarity.)\n     */\n    var schemes = Sanscript.schemes = {\n\n            /* Bengali\n             * -------\n             * 'va' and 'ba' are both rendered as ব.\n             */\n            bengali: {\n                vowels: 'অ আ ই ঈ উ ঊ ঋ ৠ ঌ ৡ  এ ঐ  ও ঔ'.split(' '),\n                vowel_marks: 'া ি ী ু ূ ৃ ৄ ৢ ৣ  ে ৈ  ো ৌ'.split(' '),\n                other_marks: 'ং ঃ ঁ'.split(' '),\n                virama: ['্'],\n                consonants: 'ক খ গ ঘ ঙ চ ছ জ ঝ ঞ ট ঠ ড ঢ ণ ত থ দ ধ ন প ফ ব ভ ম য র ল ব শ ষ স হ ळ ক্ষ জ্ঞ'.split(' '),\n                symbols: '০ ১ ২ ৩ ৪ ৫ ৬ ৭ ৮ ৯ ॐ ঽ । ॥'.split(' '),\n                other: '    ড ঢ  য '.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* Devanagari\n             * ----------\n             * The most comprehensive and unambiguous Brahmic script listed.\n             */\n            devanagari: {\n                // \"Independent\" forms of the vowels. These are used whenever the\n                // vowel does not immediately follow a consonant.\n                vowels: 'अ आ इ ई उ ऊ ऋ ॠ ऌ ॡ ऎ ए ऐ ऒ ओ औ'.split(' '),\n\n                // \"Dependent\" forms of the vowels. These are used whenever the\n                // vowel immediately follows a consonant. If a letter is not\n                // listed in `vowels`, it should not be listed here.\n                vowel_marks: 'ा ि ी ु ू ृ ॄ ॢ ॣ ॆ े ै ॊ ो ौ'.split(' '),\n\n                // Miscellaneous marks, all of which are used in Sanskrit.\n                other_marks: 'ं ः ँ'.split(' '),\n\n                // In syllabic scripts like Devanagari, consonants have an inherent\n                // vowel that must be suppressed explicitly. We do so by putting a\n                // virama after the consonant.\n                virama: ['्'],\n\n                // Various Sanskrit consonants and consonant clusters. Every token\n                // here has an explicit vowel. Thus \"क\" is \"ka\" instead of \"k\".\n                consonants: 'क ख ग घ ङ च छ ज झ ञ ट ठ ड ढ ण त थ द ध न प फ ब भ म य र ल व श ष स ह ळ क्ष ज्ञ'.split(' '),\n\n                // Numbers and punctuation\n                symbols: '० १ २ ३ ४ ५ ६ ७ ८ ९ ॐ ऽ । ॥'.split(' '),\n\n                // Zero-width joiner. This is used to separate a consonant cluster\n                // and avoid a complex ligature.\n                zwj: ['\\u200D'],\n\n                // Dummy consonant. This is used in ITRANS to prevert certain types\n                // of parser ambiguity. Thus \"barau\" -> बरौ but \"bara_u\" -> बरउ.\n                skip: [''],\n\n                // Vedic accent. Udatta and anudatta.\n                accent: ['\\u0951', '\\u0952'],\n\n                // Accent combined with anusvara and and visarga. For compatibility\n                // with ITRANS, which allows the reverse of these four.\n                combo_accent: 'ः॑ ः॒ ं॑ ं॒'.split(' '),\n\n                candra: ['ॅ'],\n\n                // Non-Sanskrit consonants\n                other: 'क़ ख़ ग़ ज़ ड़ ढ़ फ़ य़ ऱ'.split(' ')\n            },\n\n            /* Gujarati\n             * --------\n             * Sanskrit-complete.\n             */\n            gujarati: {\n                vowels: 'અ આ ઇ ઈ ઉ ઊ ઋ ૠ ઌ ૡ  એ ઐ  ઓ ઔ'.split(' '),\n                vowel_marks: 'ા િ ી ુ ૂ ૃ ૄ ૢ ૣ  ે ૈ  ો ૌ'.split(' '),\n                other_marks: 'ં ઃ ઁ'.split(' '),\n                virama: ['્'],\n                consonants: 'ક ખ ગ ઘ ઙ ચ છ જ ઝ ઞ ટ ઠ ડ ઢ ણ ત થ દ ધ ન પ ફ બ ભ મ ય ર લ વ શ ષ સ હ ળ ક્ષ જ્ઞ'.split(' '),\n                symbols: '૦ ૧ ૨ ૩ ૪ ૫ ૬ ૭ ૮ ૯ ૐ ઽ . ..'.split(' '),\n                candra: ['ૅ'],\n                skip: [''],\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"],\n                other: 'ક ખ ગ જ ડ ઢ ફ ય ર'.split(' ')\n            },\n\n            /* Gurmukhi\n             * --------\n             * Missing R/RR/lR/lRR\n             */\n            gurmukhi: {\n                vowels: 'ਅ ਆ ਇ ਈ ਉ ਊ      ਏ ਐ  ਓ ਔ'.split(' '),\n                vowel_marks: 'ਾ ਿ ੀ ੁ ੂ      ੇ ੈ  ੋ ੌ'.split(' '),\n                other_marks: 'ਂ ਃ ਁ'.split(' '),\n                virama: ['੍'],\n                consonants: 'ਕ ਖ ਗ ਘ ਙ ਚ ਛ ਜ ਝ ਞ ਟ ਠ ਡ ਢ ਣ ਤ ਥ ਦ ਧ ਨ ਪ ਫ ਬ ਭ ਮ ਯ ਰ ਲ ਵ ਸ਼ ਸ਼ ਸ ਹ ਲ਼ ਕ੍ਸ਼ ਜ੍ਞ'.split(' '),\n                symbols: '੦ ੧ ੨ ੩ ੪ ੫ ੬ ੭ ੮ ੯ ॐ ऽ । ॥'.split(' '),\n                other: ' ਖ ਗ ਜ ਡ  ਫ  '.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* Kannada\n             * -------\n             * Sanskrit-complete.\n             */\n            kannada: {\n                vowels: 'ಅ ಆ ಇ ಈ ಉ ಊ ಋ ೠ ಌ ೡ ಎ ಏ ಐ ಒ ಓ ಔ'.split(' '),\n                vowel_marks: 'ಾ ಿ ೀ ು ೂ ೃ ೄ ೢ ೣ ೆ ೇ ೈ ೊ ೋ ೌ'.split(' '),\n                other_marks: 'ಂ ಃ ँ'.split(' '),\n                virama: ['್'],\n                consonants: 'ಕ ಖ ಗ ಘ ಙ ಚ ಛ ಜ ಝ ಞ ಟ ಠ ಡ ಢ ಣ ತ ಥ ದ ಧ ನ ಪ ಫ ಬ ಭ ಮ ಯ ರ ಲ ವ ಶ ಷ ಸ ಹ ಳ ಕ್ಷ ಜ್ಞ'.split(' '),\n                symbols: '೦ ೧ ೨ ೩ ೪ ೫ ೬ ೭ ೮ ೯ ಓಂ ಽ । ॥'.split(' '),\n                other: '      ಫ  ಱ'.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* Malayalam\n             * ---------\n             * Sanskrit-complete.\n             */\n            malayalam: {\n                vowels: 'അ ആ ഇ ഈ ഉ ഊ ഋ ൠ ഌ ൡ എ ഏ ഐ ഒ ഓ ഔ'.split(' '),\n                vowel_marks: 'ാ ി ീ ു ൂ ൃ ൄ ൢ ൣ െ േ ൈ ൊ ോ ൌ'.split(' '),\n                other_marks: 'ം ഃ ँ'.split(' '),\n                virama: ['്'],\n                consonants: 'ക ഖ ഗ ഘ ങ ച ഛ ജ ഝ ഞ ട ഠ ഡ ഢ ണ ത ഥ ദ ധ ന പ ഫ ബ ഭ മ യ ര ല വ ശ ഷ സ ഹ ള ക്ഷ ജ്ഞ'.split(' '),\n                symbols: '൦ ൧ ൨ ൩ ൪ ൫ ൬ ൭ ൮ ൯ ഓം ഽ । ॥'.split(' '),\n                other: '        റ'.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* Oriya\n             * -----\n             * Sanskrit-complete.\n             */\n            oriya: {\n                vowels: 'ଅ ଆ ଇ ଈ ଉ ଊ ଋ ୠ ଌ ୡ  ଏ ଐ  ଓ ଔ'.split(' '),\n                vowel_marks: 'ା ି ୀ ୁ ୂ ୃ ୄ ୢ ୣ  େ ୈ  ୋ ୌ'.split(' '),\n                other_marks: 'ଂ ଃ ଁ'.split(' '),\n                virama: ['୍'],\n                consonants: 'କ ଖ ଗ ଘ ଙ ଚ ଛ ଜ ଝ ଞ ଟ ଠ ଡ ଢ ଣ ତ ଥ ଦ ଧ ନ ପ ଫ ବ ଭ ମ ଯ ର ଲ ଵ ଶ ଷ ସ ହ ଳ କ୍ଷ ଜ୍ଞ'.split(' '),\n                symbols: '୦ ୧ ୨ ୩ ୪ ୫ ୬ ୭ ୮ ୯ ଓଂ ଽ । ॥'.split(' '),\n                other: '    ଡ ଢ  ଯ '.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* Tamil\n             * -----\n             * Missing R/RR/lR/lRR vowel marks and voice/aspiration distinctions.\n             * The most incomplete of the Sanskrit schemes here.\n             */\n            tamil: {\n                vowels: 'அ ஆ இ ஈ உ ஊ ருʼ ரூʼ லுʼ லூʼ எ ஏ ஐ ஒ ஓ ஔ'.split(' '),\n                vowel_marks: 'ா ி ீ ு ூ ருʼ ரூʼ லுʼ லூʼ ெ ே ை ொ ோ ௌ'.split(' '),\n                other_marks: 'ம்’ : '.split(' '),\n                virama: ['்'],\n                consonants: 'க க² க³ க⁴ ங ச ச² ஜ ச ஞ ட ட² ட³ ட⁴ ண த த² த³ த⁴ ந ப ப² ப³ ப⁴ ம ய ர ல வ ஶ ஷ ஸ ஹ ள க்ஷ ஜ்ஞ'.split(' '),\n                symbols: '0 1 2 3 4 5 6 7 8 9 ௐ ऽ । ॥'.split(' '),\n                other: '        ற'.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* Telugu\n             * ------\n             * Sanskrit-complete.\n             */\n            telugu: {\n                vowels: 'అ ఆ ఇ ఈ ఉ ఊ ఋ ౠ ఌ ౡ ఎ ఏ ఐ ఒ ఓ ఔ'.split(' '),\n                vowel_marks: 'ా ి ీ ు ూ ృ ౄ ౢ ౣ ె ే ై ొ ో ౌ'.split(' '),\n                other_marks: 'ం ః ఁ'.split(' '),\n                virama: ['్'],\n                consonants: 'క ఖ గ ఘ ఙ చ ఛ జ ఝ ఞ ట ఠ డ ఢ ణ త థ ద ధ న ప ఫ బ భ మ య ర ల వ శ ష స హ ళ క్ష జ్ఞ'.split(' '),\n                symbols: '౦ ౧ ౨ ౩ ౪ ౫ ౬ ౭ ౮ ౯ ఓం ఽ . ..'.split(' '),\n                other: '        ఱ'.split(' '),\n                accent: [\"\", \"\"],\n                combo_accent: [\"\", \"\", \"\", \"\"]\n            },\n\n            /* International Alphabet of Sanskrit Transliteration\n             * --------------------------------------------------\n             * The most \"professional\" Sanskrit romanization scheme.\n             */\n            iast: {\n                vowels: 'a ā i ī u ū ṛ ṝ ḷ ḹ  e ai o au'.split(' '),\n                other_marks: ['ṃ', 'ḥ', '~'],\n                virama: [''],\n                consonants: 'k kh g gh ṅ c ch j jh ñ ṭ ṭh ḍ ḍh ṇ t th d dh n p ph b bh m y r l v ś ṣ s h ḻ kṣ jñ'.split(' '),\n                symbols: \"0 1 2 3 4 5 6 7 8 9 oṃ ' । ॥\".split(' ')\n            },\n\n            /* ITRANS\n             * ------\n             * One of the first romanization schemes -- and one of the most\n             * complicated. For alternate forms, see the \"allAlternates\" variable\n             * below.\n             *\n             * '_' is a \"null\" letter, which allows adjacent vowels.\n             */\n            itrans: {\n                vowels: 'a A i I u U RRi RRI LLi LLI e E ai o O au'.split(' '),\n                other_marks: ['M', 'H', '.N'],\n                virama: [''],\n                consonants: 'k kh g gh ~N ch Ch j jh ~n T Th D Dh N t th d dh n p ph b bh m y r l v sh Sh s h L kSh j~n'.split(' '),\n                symbols: '0 1 2 3 4 5 6 7 8 9 OM .a . ..'.split(' '),\n                candra: ['.c'],\n                zwj: ['{}'],\n                skip: '_',\n                accent: [\"\\\\'\", \"\\\\_\"],\n                combo_accent: \"\\\\'H \\\\_H \\\\'M \\\\_M\".split(' '),\n                other: 'q K G z .D .Dh f Y R'.split(' ')\n            },\n\n            /* Harvard-Kyoto\n             * -------------\n             * A simple 1:1 mapping.\n             */\n            hk: {\n                vowels: 'a A i I u U R RR lR lRR  e ai  o au'.split(' '),\n                other_marks: 'M H ~'.split(' '),\n                virama: [''],\n                consonants: 'k kh g gh G c ch j jh J T Th D Dh N t th d dh n p ph b bh m y r l v z S s h L kS jJ'.split(' '),\n                symbols: \"0 1 2 3 4 5 6 7 8 9 OM ' | ||\".split(' ')\n            },\n\n            /* National Library at Kolkata\n             * ---------------------------\n             * Apart from using \"ē\" and \"ō\" instead of \"e\" and \"o\", this scheme is\n             * identical to IAST. ṝ, ḷ, and ḹ are not part of the scheme proper.\n             *\n             * This is defined further below.\n             */\n\n            /* Sanskrit Library Phonetic Basic\n             * -------------------------------\n             * With one ASCII letter per phoneme, this is the tersest transliteration\n             * scheme in use today and is especially suited to computer processing.\n             */\n            slp1: {\n                vowels: 'a A i I u U f F x X  e E  o O'.split(' '),\n                other_marks: 'M H ~'.split(' '),\n                virama: [''],\n                consonants: 'k K g G N c C j J Y w W q Q R t T d D n p P b B m y r l v S z s h L kz jY'.split(' '),\n                symbols: \"0 1 2 3 4 5 6 7 8 9 oM ' . ..\".split(' ')\n            },\n\n            /* Velthuis\n             * --------\n             * A case-insensitive Sanskrit encoding.\n             */\n            velthuis: {\n                vowels: 'a aa i ii u uu .r .rr .li .ll  e ai  o au'.split(' '),\n                other_marks: '.m .h '.split(' '),\n                virama: [''],\n                consonants: 'k kh g gh \"n c ch j jh ~n .t .th .d .d .n t th d dh n p ph b bh m y r l v ~s .s s h L k.s j~n'.split(' '),\n                symbols: \"0 1 2 3 4 5 6 7 8 9 o.m ' | ||\".split(' ')\n            },\n\n            /* WX\n             * --\n             * As terse as SLP1.\n             */\n            wx: {\n                vowels: 'a A i I u U q Q L   e E  o O'.split(' '),\n                other_marks: 'M H z'.split(' '),\n                virama: [''],\n                consonants: 'k K g G f c C j J F t T d D N w W x X n p P b B m y r l v S R s h  kR jF'.split(' '),\n                symbols: \"0 1 2 3 4 5 6 7 8 9 oM ' | ||\".split(' ')\n            }\n        },\n\n    // Set of names of schemes\n        romanSchemes = {},\n\n    // Map of alternate encodings.\n        allAlternates = {\n            itrans: {\n                A: ['aa'],\n                I: ['ii', 'ee'],\n                U: ['uu', 'oo'],\n                RRi: ['R^i'],\n                RRI: ['R^I'],\n                LLi: ['L^i'],\n                LLI: ['L^I'],\n                M: ['.m', '.n'],\n                '~N': ['N^'],\n                ch: ['c'],\n                Ch: ['C', 'chh'],\n                '~n': ['JN'],\n                v: ['w'],\n                Sh: ['S', 'shh'],\n                kSh: ['kS', 'x'],\n                'j~n': ['GY', 'dny'],\n                OM: ['AUM'],\n                \"\\\\_\": [\"\\\\`\"],\n                \"\\\\_H\": [\"\\\\`H\"],\n                \"\\\\'M\": [\"\\\\'.m\", \"\\\\'.n\"],\n                \"\\\\_M\": \"\\\\_.m \\\\_.n \\\\`M \\\\`.m \\\\`.n\".split(' '),\n                \".a\": ['~'],\n                '|': ['.'],\n                '||': ['..'],\n                z: ['J']\n            }\n        },\n\n    // object cache\n        cache = {};\n\n    /**\n     * Check whether the given scheme encodes romanized Sanskrit.\n     *\n     * @param name  the scheme name\n     * @return      boolean\n     */\n    Sanscript.isRomanScheme = function(name) {\n        return romanSchemes.hasOwnProperty(name);\n    };\n\n    /**\n     * Add a Brahmic scheme to Sanscript.\n     *\n     * Schemes are of two types: \"Brahmic\" and \"roman\". Brahmic consonants\n     * have an inherent vowel sound, but roman consonants do not. This is the\n     * main difference between these two types of scheme.\n     *\n     * A scheme definition is an object (\"{}\") that maps a group name to a\n     * list of characters. For illustration, see the \"devanagari\" scheme at\n     * the top of this file.\n     *\n     * You can use whatever group names you like, but for the best results,\n     * you should use the same group names that Sanscript does.\n     *\n     * @param name    the scheme name\n     * @param scheme  the scheme data itself. This should be constructed as\n     *                described above.\n     */\n    Sanscript.addBrahmicScheme = function(name, scheme) {\n        Sanscript.schemes[name] = scheme;\n    };\n\n    /**\n     * Add a roman scheme to Sanscript.\n     *\n     * See the comments on Sanscript.addBrahmicScheme. The \"vowel_marks\" field\n     * can be omitted.\n     *\n     * @param name    the scheme name\n     * @param scheme  the scheme data itself\n     */\n    Sanscript.addRomanScheme = function(name, scheme) {\n        if (!('vowel_marks' in scheme)) {\n            scheme.vowel_marks = scheme.vowels.slice(1);\n        }\n        Sanscript.schemes[name] = scheme;\n        romanSchemes[name] = true;\n    };\n\n    /**\n     * Create a deep copy of an object, for certain kinds of objects.\n     *\n     * @param scheme  the scheme to copy\n     * @return        the copy\n     */\n    var cheapCopy = function(scheme) {\n        var copy = {};\n        for (var key in scheme) {\n            if (!scheme.hasOwnProperty(key)) {\n                continue;\n            }\n            copy[key] = scheme[key].slice(0);\n        }\n        return copy;\n    };\n\n    // Set up various schemes\n    (function() {\n        // Set up roman schemes\n        var kolkata = schemes.kolkata = cheapCopy(schemes.iast),\n            schemeNames = 'iast itrans hk kolkata slp1 velthuis wx'.split(' ');\n        kolkata.vowels = 'a ā i ī u ū ṛ ṝ ḷ ḹ e ē ai o ō au'.split(' ');\n\n        // These schemes already belong to Sanscript.schemes. But by adding\n        // them again with `addRomanScheme`, we automatically build up\n        // `romanSchemes` and define a `vowel_marks` field for each one.\n        for (var i = 0, name; (name = schemeNames[i]); i++) {\n            Sanscript.addRomanScheme(name, schemes[name]);\n        }\n\n        // ITRANS variant, which supports Dravidian short 'e' and 'o'.\n        var itrans_dravidian = cheapCopy(schemes.itrans);\n        itrans_dravidian.vowels = 'a A i I u U Ri RRI LLi LLi e E ai o O au'.split(' ');\n        itrans_dravidian.vowel_marks = itrans_dravidian.vowels.slice(1);\n        allAlternates.itrans_dravidian = allAlternates.itrans;\n        Sanscript.addRomanScheme('itrans_dravidian', itrans_dravidian);\n    }());\n\n    /**\n     * Create a map from every character in `from` to its partner in `to`.\n     * Also, store any \"marks\" that `from` might have.\n     *\n     * @param from     input scheme\n     * @param to       output scheme\n     * @param options  scheme options\n     */\n    var makeMap = function(from, to, options) {\n        var alternates = allAlternates[from] || {},\n            consonants = {},\n            fromScheme = Sanscript.schemes[from],\n            letters = {},\n            tokenLengths = [],\n            marks = {},\n            toScheme = Sanscript.schemes[to];\n\n        for (var group in fromScheme) {\n            if (!fromScheme.hasOwnProperty(group)) {\n                continue;\n            }\n            var fromGroup = fromScheme[group],\n                toGroup = toScheme[group];\n            if (toGroup === undefined) {\n                continue;\n            }\n            for (var i = 0; i < fromGroup.length; i++) {\n                var F = fromGroup[i],\n                    T = toGroup[i],\n                    alts = alternates[F] || [],\n                    numAlts = alts.length,\n                    j = 0;\n\n                tokenLengths.push(F.length);\n                for (j = 0; j < numAlts; j++) {\n                    tokenLengths.push(alts[j].length);\n                }\n\n                if (group === 'vowel_marks' || group === 'virama') {\n                    marks[F] = T;\n                    for (j = 0; j < numAlts; j++) {\n                        marks[alts[j]] = T;\n                    }\n                } else {\n                    letters[F] = T;\n                    for (j = 0; j < numAlts; j++) {\n                        letters[alts[j]] = T;\n                    }\n                    if (group === 'consonants' || group === 'other') {\n                        consonants[F] = T;\n\n                        for (j = 0; j < numAlts; j++) {\n                            consonants[alts[j]] = T;\n                        }\n                    }\n                }\n            }\n        }\n\n        return {consonants: consonants,\n            fromRoman: Sanscript.isRomanScheme(from),\n            letters: letters,\n            marks: marks,\n            maxTokenLength: Math.max.apply(Math, tokenLengths),\n            toRoman: Sanscript.isRomanScheme(to),\n            virama: toScheme.virama};\n    };\n\n    /**\n     * Transliterate from a romanized script.\n     *\n     * @param data     the string to transliterate\n     * @param map      map data generated from makeMap()\n     * @param options  transliteration options\n     * @return         the finished string\n     */\n    var transliterateRoman = function(data, map, options) {\n        var buf = [],\n            consonants = map.consonants,\n            dataLength = data.length,\n            hadConsonant = false,\n            letters = map.letters,\n            marks = map.marks,\n            maxTokenLength = map.maxTokenLength,\n            optSkipSGML = options.skip_sgml,\n            optSyncope = options.syncope,\n            tempLetter,\n            tempMark,\n            tokenBuffer = '',\n            toRoman = map.toRoman,\n            virama = map.virama;\n\n        // Transliteration state. It's controlled by these values:\n        // - `skippingSGML`: are we in SGML?\n        // - `toggledTrans`: are we in a toggled region?\n        //\n        // We combine these values into a single variable `skippingTrans`:\n        //\n        //     `skippingTrans` = skippingSGML || toggledTrans;\n        //\n        // If (and only if) this value is true, don't transliterate.\n        var skippingSGML = false,\n            skippingTrans = false,\n            toggledTrans = false;\n\n        for (var i = 0, L; (L = data.charAt(i)) || tokenBuffer; i++) {\n            // Fill the token buffer, if possible.\n            var difference = maxTokenLength - tokenBuffer.length;\n            if (difference > 0 && i < dataLength) {\n                tokenBuffer += L;\n                if (difference > 1) {\n                    continue;\n                }\n            }\n\n            // Match all token substrings to our map.\n            for (var j = 0; j < maxTokenLength; j++) {\n                var token = tokenBuffer.substr(0,maxTokenLength-j);\n\n                if (skippingSGML === true) {\n                    skippingSGML = (token !== '>');\n                } else if (token === '<') {\n                    skippingSGML = optSkipSGML;\n                } else if (token === '##') {\n                    toggledTrans = !toggledTrans;\n                    tokenBuffer = tokenBuffer.substr(2);\n                    break;\n                }\n                skippingTrans = skippingSGML || toggledTrans;\n                if ((tempLetter = letters[token]) !== undefined && !skippingTrans) {\n                    if (toRoman) {\n                        buf.push(tempLetter);\n                    } else {\n                        // Handle the implicit vowel. Ignore 'a' and force\n                        // vowels to appear as marks if we've just seen a\n                        // consonant.\n                        if (hadConsonant) {\n                            if ((tempMark = marks[token])) {\n                                buf.push(tempMark);\n                            } else if (token !== 'a') {\n                                buf.push(virama);\n                                buf.push(tempLetter);\n                            }\n                        } else {\n                            buf.push(tempLetter);\n                        }\n                        hadConsonant = token in consonants;\n                    }\n                    tokenBuffer = tokenBuffer.substr(maxTokenLength-j);\n                    break;\n                } else if (j === maxTokenLength - 1) {\n                    if (hadConsonant) {\n                        hadConsonant = false;\n                        if (!optSyncope) {\n                            buf.push(virama);\n                        }\n                    }\n                    buf.push(token);\n                    tokenBuffer = tokenBuffer.substr(1);\n                    // 'break' is redundant here, \"j == ...\" is true only on\n                    // the last iteration.\n                }\n            }\n        }\n        if (hadConsonant && !optSyncope) {\n            buf.push(virama);\n        }\n        return buf.join('');\n    };\n\n    /**\n     * Transliterate from a Brahmic script.\n     *\n     * @param data     the string to transliterate\n     * @param map      map data generated from makeMap()\n     * @param options  transliteration options\n     * @return         the finished string\n     */\n    var transliterateBrahmic = function(data, map, options) {\n        var buf = [],\n            consonants = map.consonants,\n            danglingHash = false,\n            hadRomanConsonant = false,\n            letters = map.letters,\n            marks = map.marks,\n            temp,\n            toRoman = map.toRoman,\n            skippingTrans = false;\n\n        for (var i = 0, L; (L = data.charAt(i)); i++) {\n            // Toggle transliteration state\n            if (L === '#') {\n                if (danglingHash) {\n                    skippingTrans = !skippingTrans;\n                    danglingHash = false;\n                } else {\n                    danglingHash = true;\n                }\n                if (hadRomanConsonant) {\n                    buf.push('a');\n                    hadRomanConsonant = false;\n                }\n                continue;\n            } else if (skippingTrans) {\n                buf.push(L);\n                continue;\n            }\n\n            if ((temp = marks[L]) !== undefined) {\n                buf.push(temp);\n                hadRomanConsonant = false;\n            } else {\n                if (danglingHash) {\n                    buf.push('#');\n                    danglingHash = false;\n                }\n                if (hadRomanConsonant) {\n                    buf.push('a');\n                    hadRomanConsonant = false;\n                }\n\n                // Push transliterated letter if possible. Otherwise, push\n                // the letter itself.\n                if ((temp = letters[L])) {\n                    buf.push(temp);\n                    hadRomanConsonant = toRoman && (L in consonants);\n                } else {\n                    buf.push(L);\n                }\n            }\n        }\n        if (hadRomanConsonant) {\n            buf.push('a');\n        }\n        return buf.join('');\n    };\n\n    /**\n     * Transliterate from one script to another.\n     *\n     * @param data     the string to transliterate\n     * @param from     the source script\n     * @param to       the destination script\n     * @param options  transliteration options\n     * @return         the finished string\n     */\n    Sanscript.t = function(data, from, to, options) {\n        options = options || {};\n        var cachedOptions = cache.options || {},\n            defaults = Sanscript.defaults,\n            hasPriorState = (cache.from === from && cache.to === to),\n            map;\n\n        // Here we simultaneously build up an `options` object and compare\n        // these options to the options from the last run.\n        for (var key in defaults) {\n            if (defaults.hasOwnProperty(key)) {\n                var value = defaults[key];\n                if (key in options) {\n                    value = options[key];\n                }\n                options[key] = value;\n\n                // This comparison method is not generalizable, but since these\n                // objects are associative arrays with identical keys and with\n                // values of known type, it works fine here.\n                if (value !== cachedOptions[key]) {\n                    hasPriorState = false;\n                }\n            }\n        }\n\n        if (hasPriorState) {\n            map = cache.map;\n        } else {\n            map = makeMap(from, to, options);\n            cache = {\n                from: from,\n                map: map,\n                options: options,\n                to: to};\n        }\n\n        // Easy way out for \"{\\m+}\", \"\\\", and \".h\".\n        if (from === 'itrans') {\n            data = data.replace(/\\{\\\\m\\+\\}/g, \".h.N\");\n            data = data.replace(/\\.h/g, '');\n            data = data.replace(/\\\\([^'`_]|$)/g, \"##$1##\");\n        }\n\n        var alldata = '';\n        if (map.fromRoman) {\n            alldata = transliterateRoman(data, map, options);\n        } else {\n            alldata = transliterateBrahmic(data, map, options);\n        }\n\n        // Fix any remaining quotations for Vedic Accents\n        if (to === 'devanagari' && options.enableSanskritVedicAccents === true) {\n            //alldata = alldata.replace('\\\\\"', \"\\u1CDA\").replace('\"', \"\\u1CDA\").replace('&quot;', \"\\u1CDA\");\n            alldata = alldata.replace(/\\\\?\"/g, \"\\u1CDA\");\n        } else if (! (to === \"itrans\" || to === \"iast\")) {\n            alldata = alldata.replace(/\\\\?\"/g, \"\");\n        }\n\n        // Enable Tamil Accents Support\n        if (to === 'tamil' && options.enableTamilPronounciation === true) {\n            alldata = alldata.replace(/(.)(²|³|⁴)(ா|ி|ீ|ு|ூ|ெ|ே|ை|ொ|ோ|ௌ|்)/g,\"$1$3$2\")\n        }\n        if (to === 'tamil' && options.enableTamilCharPositionFixes === true) {\n            alldata = alldata\n                .replace(/(^|\\s+)(த|ந்|தை)/g,\"$1ந$2\")\n                .replace(/([^\\s])ந/g, \"$1ன\")\n        }\n        return alldata;\n    };\n\n\n\nmodule.exports = {\n    Sanscript: Sanscript\n};\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}