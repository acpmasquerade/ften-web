{"version":3,"sources":["webpack:///./src/pages/lib/fountain-fold.js"],"names":["fountainFoldFn","cm","start","maxDepth","isSection","lineNo","tokentype","getTokenTypeAt","CodeMirror","res","test","sectionLevel","line","nextLine","match","length","sceneHeading","firstLine","getLine","lastLineNo","lastLine","end","nextNextLine","from","to","level"],"mappings":"2JAEe,SAASA,EAAeC,EAAIC,GACzC,IAAMC,EAAW,IAEjB,SAASC,EAAUC,GACjB,IAAMC,EAAYL,EAAGM,eAAeC,MAAeH,EAAQ,IACrDI,EAAM,cAAcC,KAAKJ,GAC/B,OAAOA,GAAaG,EAGtB,SAASE,EAAaN,EAAQO,EAAMC,GAClC,IAAMC,EAAQF,GAAQA,EAAKE,MAAM,OACjC,OAAIA,GAASV,EAAUC,GAAgBS,EAAM,GAAGC,OAGzCZ,EAGT,SAASa,EAAaX,EAAQO,GAE5B,OAAOA,GADe,mEACOF,KAAKE,GAGpC,IAAMK,EAAYhB,EAAGiB,QAAQhB,EAAMU,MAC/BC,EAAWZ,EAAGiB,QAAQhB,EAAMU,KAAO,GAEvC,GAAII,EAAad,EAAMU,KAAMK,GAAY,CAKvC,IAJA,IAAME,EAAalB,EAAGmB,WAClBC,EAAMnB,EAAMU,KACZU,EAAerB,EAAGiB,QAAQG,EAAM,GAE7BA,EAAMF,IACPH,EAAaK,EAASR,KAAaT,EAAUiB,EAAM,MAErDA,EACFR,EAAWS,EACXA,EAAerB,EAAGiB,QAAQG,EAAM,GAGlC,MAAO,CACLE,KAAMf,MAAeN,EAAMU,KAAMK,EAAUF,QAC3CS,GAAIhB,MAAea,EAAKpB,EAAGiB,QAAQG,GAAKN,SAI5C,IAAMU,EAAQd,EAAaT,EAAMU,KAAMK,GACvC,GAAIQ,IAAUtB,EAAd,CAMA,IAHA,IAAMgB,EAAalB,EAAGmB,WAClBC,EAAMnB,EAAMU,KACZU,EAAerB,EAAGiB,QAAQG,EAAM,GAC7BA,EAAMF,KACPR,EAAaU,EAAM,EAAGR,IAA2BY,MACnDJ,EACFR,EAAWS,EACXA,EAAerB,EAAGiB,QAAQG,EAAM,GAGlC,MAAO,CACLE,KAAMf,MAAeN,EAAMU,KAAMK,EAAUF,QAC3CS,GAAIhB,MAAea,EAAKpB,EAAGiB,QAAQG,GAAKN","file":"component---src-pages-lib-fountain-fold-js-56169e6d0c09f99dfbaf.js","sourcesContent":["import * as CodeMirror from 'codemirror';\n\nexport default function fountainFoldFn(cm, start) {\n  const maxDepth = 100;\n\n  function isSection(lineNo) {\n    const tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    const res = /\\bsection\\b/.test(tokentype);\n    return tokentype && res;\n  }\n\n  function sectionLevel(lineNo, line, nextLine) {\n    const match = line && line.match(/^#+/);\n    if (match && isSection(lineNo)) return match[0].length;\n    // match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    // if (match && isSection(lineNo + 1)) return nextLine[0] === '=' ? 1 : 2;\n    return maxDepth;\n  }\n\n  function sceneHeading(lineNo, line) {\n    const SCENE_HEADING = /(^\\.[\\w]+.+)|(?:(?:^int|ext|est|int\\.ext|int\\/ext|i\\/e)[. ].+)$/i;\n    return line && SCENE_HEADING.test(line);\n  }\n\n  const firstLine = cm.getLine(start.line);\n  let nextLine = cm.getLine(start.line + 1);\n  // sceneHeading folding\n  if (sceneHeading(start.line, firstLine)) {\n    const lastLineNo = cm.lastLine();\n    let end = start.line;\n    let nextNextLine = cm.getLine(end + 2);\n\n    while (end < lastLineNo) {\n      if (sceneHeading(end + 1, nextLine) || isSection(end + 1)) break;\n\n      ++end;\n      nextLine = nextNextLine;\n      nextNextLine = cm.getLine(end + 2);\n    }\n    // console.log(`fold from ${start.line} to ${end}`);\n    return {\n      from: CodeMirror.Pos(start.line, firstLine.length),\n      to: CodeMirror.Pos(end, cm.getLine(end).length)\n    };\n  }\n\n  const level = sectionLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  // Follow markdown header-level folding rules\n  const lastLineNo = cm.lastLine();\n  let end = start.line;\n  let nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (sectionLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {    \n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n}\n"],"sourceRoot":""}