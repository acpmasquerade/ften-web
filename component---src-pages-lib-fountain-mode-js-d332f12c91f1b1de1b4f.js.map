{"version":3,"sources":["webpack:///./src/pages/lib/fountain-fold.js","webpack:///./src/pages/lib/fountain-mode.js"],"names":["CodeMirror","require","fountainFoldFn","cm","start","maxDepth","isSection","lineNo","tokentype","getTokenTypeAt","Pos","res","test","sectionLevel","line","nextLine","match","length","sceneHeading","firstLine","getLine","lastLineNo","lastLine","end","nextNextLine","from","to","level","SCENE_HEADING","TRANSITION","CHARACTER","PARENTHETICAL","CENTERED_TEXT","SECTION","ITALICS","BOLD","BOLD_ITALICS","UNDERLINE","fountainModeFn","editorConf","config_","isNextLineBlank","stream","lookAhead","registerHelper","startState","console","log","blankLine","character","parenthetical","token","state","skipToEnd","dialog","next"],"mappings":"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","file":"component---src-pages-lib-fountain-mode-js-d332f12c91f1b1de1b4f.js","sourcesContent":[" const CodeMirror = require(\"codemirror\");\n\nexport default function fountainFoldFn(cm, start) {\n  const maxDepth = 100;\n\n  function isSection(lineNo) {\n    const tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    const res = /\\bsection\\b/.test(tokentype);\n    return tokentype && res;\n  }\n\n  function sectionLevel(lineNo, line, nextLine) {\n    const match = line && line.match(/^#+/);\n    if (match && isSection(lineNo)) return match[0].length;\n    // match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    // if (match && isSection(lineNo + 1)) return nextLine[0] === '=' ? 1 : 2;\n    return maxDepth;\n  }\n\n  function sceneHeading(lineNo, line) {\n    const SCENE_HEADING = /(^\\.[\\w]+.+)|(?:(?:^int|ext|est|int\\.ext|int\\/ext|i\\/e)[. ].+)$/i;\n    return line && SCENE_HEADING.test(line);\n  }\n\n  const firstLine = cm.getLine(start.line);\n  let nextLine = cm.getLine(start.line + 1);\n  // sceneHeading folding\n  if (sceneHeading(start.line, firstLine)) {\n    const lastLineNo = cm.lastLine();\n    let end = start.line;\n    let nextNextLine = cm.getLine(end + 2);\n\n    while (end < lastLineNo) {\n      if (sceneHeading(end + 1, nextLine) || isSection(end + 1)) break;\n\n      ++end;\n      nextLine = nextNextLine;\n      nextNextLine = cm.getLine(end + 2);\n    }\n    // console.log(`fold from ${start.line} to ${end}`);\n    return {\n      from: CodeMirror.Pos(start.line, firstLine.length),\n      to: CodeMirror.Pos(end, cm.getLine(end).length)\n    };\n  }\n\n  const level = sectionLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  // Follow markdown header-level folding rules\n  const lastLineNo = cm.lastLine();\n  let end = start.line;\n  let nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (sectionLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {    \n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n}\n","import fountainFoldFn from './fountain-fold';\n\nconst CodeMirror = require(\"codemirror\");\nconst SCENE_HEADING = /(^\\.[\\w]+.+)|(?:(?:^int|ext|est|int\\.ext|int\\/ext|i\\/e)[. ].+)$/i;\nconst TRANSITION = /^[A-Z\\s]+TO:$/;\nconst CHARACTER = /^['A-Z\\s\\d]+(\\s*\\(.+\\)\\s*)*$/;\nconst PARENTHETICAL = /^\\s*\\(.+\\)\\s*$/;\nconst CENTERED_TEXT = /^>(.+)<$/;\nconst SECTION = /^#+/;\nconst ITALICS = /^\\*(.+)\\*$/;\nconst BOLD = /^\\*\\*(.+)\\*\\*$/;\nconst BOLD_ITALICS = /^\\*\\*\\*(.+)\\*\\*\\*$/;\nconst UNDERLINE = /^_(.+)_$/;\n\nexport default function fountainModeFn(editorConf, config_) {\n  CodeMirror.registerHelper('fold', 'fountain', fountainFoldFn);\n  function startState() {\n    console.log('startState');\n    const state = {\n      blankLine: false,\n      character: false,\n      parenthetical: false\n    };\n    return state;\n  }\n\n  function isNextLineBlank(stream) {\n    const nextLine = stream.lookAhead(1);\n    return (!nextLine || nextLine === '');\n  }\n\n  function token(stream, state) {\n    console.log('token');\n\n    if (stream.match(ITALICS)) {\n      stream.skipToEnd();\n      return 'em';\n    }\n\n    if (stream.match(BOLD)) {\n      stream.skipToEnd();\n      return 'strong';\n    }\n\n    if (stream.match(BOLD_ITALICS)) {\n      stream.skipToEnd();\n      return 'em strong';\n    }\n\n    if (stream.match(UNDERLINE)) {\n      stream.skipToEnd();\n      return 'link';\n    }\n\n    if (stream.match(SECTION)) {\n      stream.skipToEnd();\n      return 'ften-section';\n    }\n\n    if (stream.match(CENTERED_TEXT)) {\n      stream.skipToEnd();\n      state.blankLine = false;\n      state.character = false;\n      state.dialog = false;\n      state.parenthetical = false;\n      return 'ften-centered-text';\n    }\n\n    if ((state.character || state.dialog) && stream.match(PARENTHETICAL)) {\n      stream.skipToEnd();\n      state.blankLine = false;\n      state.character = false;\n      state.dialog = true;\n      state.parenthetical = true;\n      return 'variable-2 ften-parenthetical';\n    }\n    if (state.character || state.parenthetical) {\n      stream.skipToEnd();\n      state.blankLine = false;\n      state.character = false;\n      state.parenthetical = false;\n      state.dialog = true;\n      return 'string ften-dialog';\n    }\n    if (state.blankLine) {\n      if (stream.match(CHARACTER) && !isNextLineBlank(stream)) {\n        stream.skipToEnd();\n        state.blankLine = false;\n        state.character = true;\n        state.dialog = false;\n        state.parenthetical = false;\n        return 'keyword ften-character';\n      }\n\n      if (stream.match(TRANSITION) && isNextLineBlank(stream)) {\n        stream.skipToEnd();\n        state.blankLine = false;\n        state.character = false;\n        state.dialog = false;\n        state.parenthetical = false;\n        return 'line-ften-transition';\n      }\n    }\n    if (stream.match(SCENE_HEADING) && isNextLineBlank(stream)) {\n      stream.skipToEnd();\n      state.blankLine = false;\n      state.character = false;\n      state.dialog = false;\n      state.parenthetical = false;\n      return 'variable-2 line-ften-slugline';\n    }\n\n    stream.next();\n    return 'line-ften-action';\n  }\n  function blankLine(state) {\n    state.blankLine = true;\n  }\n\n  return {\n    startState,\n    token,\n    blankLine\n  };\n}\n"],"sourceRoot":""}