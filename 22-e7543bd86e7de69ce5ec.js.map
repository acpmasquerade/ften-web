{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/search/searchcursor.js","webpack:///./node_modules/codemirror/addon/dialog/dialog.js","webpack:///./node_modules/codemirror/addon/search/search.js"],"names":["CodeMirror","doFold","noFold","Pos","ensureFlags","regexp","flags","current","ignoreCase","global","multiline","regexpFlags","target","i","length","indexOf","charAt","RegExp","source","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","lastMatchIn","cutOff","newMatch","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","slice","SearchCursor","query","options","caseFold","this","atOccurrence","clipPos","matches","reverse","fold","lines","split","search","first","firstLine","found","lastIndexOf","top","topString","cutFrom","end","endString","chunk","curLine","before","inside","startLine","startCh","test","maybeMultiline","String","prototype","normalize","str","toLowerCase","findNext","find","findPrevious","result","cmpPos","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","head","setSelections","mod","__webpack_require__","dialogDiv","cm","template","bottom","dialog","wrap","getWrapperElement","appendChild","document","createElement","className","innerHTML","addClass","closeNotification","newVal","state","currentNotificationClose","callback","closed","me","close","inp","value","rmClass","parentNode","removeChild","focus","onClose","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","callbacks","buttons","blurring","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout","SearchState","posFrom","posTo","lastQuery","overlay","getSearchState","queryCaseInsensitive","text","shortText","deflt","f","openDialog","prompt","parseString","_","parseQuery","isRE","startSearch","queryText","removeOverlay","caseInsensitive","token","stream","skipToEnd","searchOverlay","addOverlay","showMatchesOnScrollbar","annotate","clear","doSearch","rev","persistent","immediate","q","getSelection","hiding","searchNext","event","style","opacity","shiftKey","querySelector","display","wrapper","getBoundingClientRect","cursorCoords","onEnter","clearSearch","persistentDialog","getQueryDialog","keyName","extra","getOption","cmd","keyMap","execCommand","operation","cursor","setSelection","scrollIntoView","phrase","replaceAll","getRange","all","dialogText","getReplaceQueryDialog","getReplacementQueryDialog","advance","fs","openConfirm","confirm","confirmDialog","getDoReplaceConfirm","doReplace","commands","findPersistent","findPersistentNext","findPersistentPrev","findPrev"],"mappings":"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","file":"22-e7543bd86e7de69ce5ec.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (q instanceof RegExp && q.source == \"x^\") q = null\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, getQueryDialog(cm), q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, getQueryDialog(cm), \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n\n  function getQueryDialog(cm)  {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Search:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplaceQueryDialog(cm) {\n    return ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplacementQueryDialog(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"With:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  }\n  function getDoReplaceConfirm(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Replace?\") + '</span> <button>' + cm.phrase(\"Yes\") + '</button> <button>' + cm.phrase(\"No\") + '</button> <button>' + cm.phrase(\"All\") + '</button> <button>' + cm.phrase(\"Stop\") + '</button> ';\n  }\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? cm.phrase(\"Replace all:\") : cm.phrase(\"Replace:\")) + '</span>';\n    dialog(cm, dialogText + getReplaceQueryDialog(cm), dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, getReplacementQueryDialog(cm), cm.phrase(\"Replace with:\"), \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, getDoReplaceConfirm(cm), cm.phrase(\"Replace?\"),\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n"],"sourceRoot":""}